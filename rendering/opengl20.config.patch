[
  {
    "op": "replace",
    "path": "/fragmentShader",
    "value": "\n    #version 110\n\n    uniform sampler2D texture0;\n    uniform sampler2D texture1;\n    uniform sampler2D texture2;\n    uniform sampler2D texture3;\n    uniform bool lightMapEnabled;\n    uniform vec2 lightMapSize;\n    uniform sampler2D lightMap;\n    uniform float lightMapMultiplier;\n\n    varying vec2 fragmentTextureCoordinate;\n    varying float fragmentTextureIndex;\n    varying vec4 fragmentColor;\n    varying float fragmentLightMapMultiplier;\n    varying vec2 fragmentLightMapCoordinate;\n\n    #define pi 3.1415926535897932384626433832795\n\n    vec3 c(vec3 x, float lightLevel)\n    {\n      return pow(sin(x * vec3(pi * 0.5)), vec3(1.0 + lightLevel)) * vec3(4.5);\n    }\n\n    vec4 cubic(float v) {\n      vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;\n      vec4 s = n * n * n;\n      float x = s.x;\n      float y = s.y - 4.0 * s.x;\n      float z = s.z - 4.0 * s.y + 6.0 * s.x;\n      float w = 6.0 - x - y - z;\n      return vec4(x, y, z, w);\n    }\n\n    vec4 bicubicSample(sampler2D texture, vec2 texcoord, vec2 texscale) {\n      texcoord = texcoord - vec2(0.5, 0.5);\n\n      float fx = fract(texcoord.x);\n      float fy = fract(texcoord.y);\n      texcoord.x -= fx;\n      texcoord.y -= fy;\n\n      vec4 xcubic = cubic(fx);\n      vec4 ycubic = cubic(fy);\n\n      vec4 c = vec4(texcoord.x - 0.5, texcoord.x + 1.5, texcoord.y - 0.5, texcoord.y + 1.5);\n      vec4 s = vec4(xcubic.x + xcubic.y, xcubic.z + xcubic.w, ycubic.x + ycubic.y, ycubic.z + ycubic.w);\n      vec4 offset = c + vec4(xcubic.y, xcubic.w, ycubic.y, ycubic.w) / s;\n\n      vec4 sample0 = texture2D(texture, vec2(offset.x, offset.z) * texscale);\n      vec4 sample1 = texture2D(texture, vec2(offset.y, offset.z) * texscale);\n      vec4 sample2 = texture2D(texture, vec2(offset.x, offset.w) * texscale);\n      vec4 sample3 = texture2D(texture, vec2(offset.y, offset.w) * texscale);\n\n      float sx = s.x / (s.x + s.y);\n      float sy = s.z / (s.z + s.w);\n\n      return mix(\n        mix(sample3, sample2, sx),\n        mix(sample1, sample0, sx), sy);\n    }\n\n    void main() {\n      vec4 texColor;\n\n      vec4 texColorUp = vec4(0.0);\n      vec4 texColorDown = vec4(0.0);\n      vec4 texColorRight = vec4(0.0);\n      vec4 texColorLeft = vec4(0.0);\n\n      if (fragmentTextureIndex > 2.9) {\n        texColor = texture2D(texture3, fragmentTextureCoordinate);\n      } else if (fragmentTextureIndex > 1.9) {\n        texColor = texture2D(texture2, fragmentTextureCoordinate);\n      } else if (fragmentTextureIndex > 0.9) {\n        texColor = texture2D(texture1, fragmentTextureCoordinate);\n      } else {\n        texColor = texture2D(texture0, fragmentTextureCoordinate);\n      }\n\n      vec4 finalColor = texColor * fragmentColor;\n      float finalLightMapMultiplier = fragmentLightMapMultiplier * lightMapMultiplier;\n      \n      if (lightMapEnabled && finalLightMapMultiplier > 0.0)\n      {\n        vec4 lightMap2D = bicubicSample(lightMap, fragmentLightMapCoordinate , 1.0 / lightMapSize);\n        lightMap2D.rgb *= vec3(finalLightMapMultiplier);\n\n        float lightLevel = (lightMap2D.r + lightMap2D.g + lightMap2D.b) / 3.0;\n\n        finalColor = texColor * fragmentColor;\n        \n        finalColor.rgb *= lightMap2D.rgb * finalLightMapMultiplier;\n\n        lightMap2D.a = lightLevel;\n\n        finalColor.rgb *= lightMap2D.rgb;\n        finalColor.rgb = c(finalColor.rgb, lightLevel);\n\n\n        lightMap2D.rgb *= 1.5;\n        lightMap2D.rgb = min(pow(lightMap2D.rgb, vec3(128.0)), vec3(0.8));\n        lightMap2D.rgb = pow(lightMap2D.rgb, vec3(0.5));\n\n        finalColor.rgb += lightMap2D.rgb;\n        finalColor.rgb *= 0.8;\n        finalColor.rgb *= vec3(0.95,0.98,1.0);\n      }else\n      {\n        if (texColor.a <= 0.0)\n        discard;\n      }\n      \n      gl_FragColor = finalColor;\n    }\n  "
  }
]